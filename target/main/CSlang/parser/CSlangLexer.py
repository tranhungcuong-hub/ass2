# Generated from main/CSlang/parser/CSlang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,64,516,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,5,1,150,8,1,10,1,12,1,153,9,1,1,1,1,1,1,2,1,2,1,2,1,
        2,5,2,161,8,2,10,2,12,2,164,9,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,
        1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,3,53,367,8,53,1,54,1,54,1,54,5,54,372,8,54,10,
        54,12,54,375,9,54,1,54,1,54,1,54,1,55,4,55,381,8,55,11,55,12,55,
        382,1,55,1,55,1,55,4,55,388,8,55,11,55,12,55,389,1,55,1,55,4,55,
        394,8,55,11,55,12,55,395,1,55,4,55,399,8,55,11,55,12,55,400,1,55,
        1,55,4,55,405,8,55,11,55,12,55,406,3,55,409,8,55,1,55,1,55,3,55,
        413,8,55,1,55,4,55,416,8,55,11,55,12,55,417,1,55,4,55,421,8,55,11,
        55,12,55,422,1,55,1,55,1,55,3,55,428,8,55,1,55,4,55,431,8,55,11,
        55,12,55,432,3,55,435,8,55,1,56,1,56,1,56,5,56,440,8,56,10,56,12,
        56,443,9,56,3,56,445,8,56,1,57,1,57,5,57,449,8,57,10,57,12,57,452,
        9,57,1,58,1,58,1,58,5,58,457,8,58,10,58,12,58,460,9,58,1,59,1,59,
        1,60,4,60,465,8,60,11,60,12,60,466,1,60,1,60,1,61,1,61,5,61,473,
        8,61,10,61,12,61,476,9,61,1,61,3,61,479,8,61,1,61,1,61,1,62,1,62,
        1,62,3,62,486,8,62,1,63,4,63,489,8,63,11,63,12,63,490,1,63,1,63,
        1,64,1,64,5,64,497,8,64,10,64,12,64,500,9,64,1,64,1,64,1,64,1,65,
        1,65,1,65,1,65,3,65,509,8,65,1,66,1,66,1,66,1,67,1,67,1,67,1,162,
        0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,0,121,60,123,61,125,0,127,62,129,63,
        131,0,133,0,135,64,1,0,14,2,0,10,10,13,13,3,0,10,10,13,13,34,34,
        2,0,69,69,101,101,2,0,43,43,45,45,1,0,49,57,1,0,48,57,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,1,8,10,12,13,39,39,92,
        92,8,0,34,34,39,39,92,92,98,98,102,102,110,110,114,114,116,116,1,
        0,92,92,3,0,8,10,12,13,32,32,5,0,8,10,12,13,34,34,39,39,92,92,7,
        0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,541,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
        0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
        1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,121,1,0,0,0,
        0,123,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,135,1,0,0,0,1,137,1,
        0,0,0,3,145,1,0,0,0,5,156,1,0,0,0,7,170,1,0,0,0,9,177,1,0,0,0,11,
        183,1,0,0,0,13,189,1,0,0,0,15,193,1,0,0,0,17,197,1,0,0,0,19,203,
        1,0,0,0,21,210,1,0,0,0,23,215,1,0,0,0,25,221,1,0,0,0,27,227,1,0,
        0,0,29,236,1,0,0,0,31,241,1,0,0,0,33,244,1,0,0,0,35,247,1,0,0,0,
        37,251,1,0,0,0,39,255,1,0,0,0,41,262,1,0,0,0,43,267,1,0,0,0,45,272,
        1,0,0,0,47,284,1,0,0,0,49,289,1,0,0,0,51,294,1,0,0,0,53,296,1,0,
        0,0,55,298,1,0,0,0,57,300,1,0,0,0,59,302,1,0,0,0,61,304,1,0,0,0,
        63,306,1,0,0,0,65,309,1,0,0,0,67,312,1,0,0,0,69,314,1,0,0,0,71,316,
        1,0,0,0,73,319,1,0,0,0,75,322,1,0,0,0,77,325,1,0,0,0,79,328,1,0,
        0,0,81,330,1,0,0,0,83,332,1,0,0,0,85,335,1,0,0,0,87,337,1,0,0,0,
        89,339,1,0,0,0,91,341,1,0,0,0,93,343,1,0,0,0,95,345,1,0,0,0,97,347,
        1,0,0,0,99,349,1,0,0,0,101,351,1,0,0,0,103,353,1,0,0,0,105,355,1,
        0,0,0,107,366,1,0,0,0,109,368,1,0,0,0,111,434,1,0,0,0,113,444,1,
        0,0,0,115,446,1,0,0,0,117,453,1,0,0,0,119,461,1,0,0,0,121,464,1,
        0,0,0,123,470,1,0,0,0,125,485,1,0,0,0,127,488,1,0,0,0,129,494,1,
        0,0,0,131,508,1,0,0,0,133,510,1,0,0,0,135,513,1,0,0,0,137,138,5,
        80,0,0,138,139,5,114,0,0,139,140,5,111,0,0,140,141,5,103,0,0,141,
        142,5,114,0,0,142,143,5,97,0,0,143,144,5,109,0,0,144,2,1,0,0,0,145,
        146,5,47,0,0,146,147,5,47,0,0,147,151,1,0,0,0,148,150,8,0,0,0,149,
        148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,
        154,1,0,0,0,153,151,1,0,0,0,154,155,6,1,0,0,155,4,1,0,0,0,156,157,
        5,47,0,0,157,158,5,42,0,0,158,162,1,0,0,0,159,161,9,0,0,0,160,159,
        1,0,0,0,161,164,1,0,0,0,162,163,1,0,0,0,162,160,1,0,0,0,163,165,
        1,0,0,0,164,162,1,0,0,0,165,166,5,42,0,0,166,167,5,47,0,0,167,168,
        1,0,0,0,168,169,6,2,0,0,169,6,1,0,0,0,170,171,5,105,0,0,171,172,
        5,109,0,0,172,173,5,112,0,0,173,174,5,111,0,0,174,175,5,114,0,0,
        175,176,5,116,0,0,176,8,1,0,0,0,177,178,5,64,0,0,178,179,5,109,0,
        0,179,180,5,97,0,0,180,181,5,105,0,0,181,182,5,110,0,0,182,10,1,
        0,0,0,183,184,5,99,0,0,184,185,5,111,0,0,185,186,5,110,0,0,186,187,
        5,115,0,0,187,188,5,116,0,0,188,12,1,0,0,0,189,190,5,118,0,0,190,
        191,5,97,0,0,191,192,5,114,0,0,192,14,1,0,0,0,193,194,5,105,0,0,
        194,195,5,110,0,0,195,196,5,116,0,0,196,16,1,0,0,0,197,198,5,102,
        0,0,198,199,5,108,0,0,199,200,5,111,0,0,200,201,5,97,0,0,201,202,
        5,116,0,0,202,18,1,0,0,0,203,204,5,115,0,0,204,205,5,116,0,0,205,
        206,5,114,0,0,206,207,5,105,0,0,207,208,5,110,0,0,208,209,5,103,
        0,0,209,20,1,0,0,0,210,211,5,98,0,0,211,212,5,111,0,0,212,213,5,
        111,0,0,213,214,5,108,0,0,214,22,1,0,0,0,215,216,5,98,0,0,216,217,
        5,114,0,0,217,218,5,101,0,0,218,219,5,97,0,0,219,220,5,107,0,0,220,
        24,1,0,0,0,221,222,5,99,0,0,222,223,5,108,0,0,223,224,5,97,0,0,224,
        225,5,115,0,0,225,226,5,115,0,0,226,26,1,0,0,0,227,228,5,99,0,0,
        228,229,5,111,0,0,229,230,5,110,0,0,230,231,5,116,0,0,231,232,5,
        105,0,0,232,233,5,110,0,0,233,234,5,117,0,0,234,235,5,101,0,0,235,
        28,1,0,0,0,236,237,5,101,0,0,237,238,5,108,0,0,238,239,5,115,0,0,
        239,240,5,101,0,0,240,30,1,0,0,0,241,242,5,60,0,0,242,243,5,45,0,
        0,243,32,1,0,0,0,244,245,5,105,0,0,245,246,5,102,0,0,246,34,1,0,
        0,0,247,248,5,110,0,0,248,249,5,101,0,0,249,250,5,119,0,0,250,36,
        1,0,0,0,251,252,5,102,0,0,252,253,5,111,0,0,253,254,5,114,0,0,254,
        38,1,0,0,0,255,256,5,114,0,0,256,257,5,101,0,0,257,258,5,116,0,0,
        258,259,5,117,0,0,259,260,5,114,0,0,260,261,5,110,0,0,261,40,1,0,
        0,0,262,263,5,118,0,0,263,264,5,111,0,0,264,265,5,105,0,0,265,266,
        5,100,0,0,266,42,1,0,0,0,267,268,5,110,0,0,268,269,5,117,0,0,269,
        270,5,108,0,0,270,271,5,108,0,0,271,44,1,0,0,0,272,273,5,99,0,0,
        273,274,5,111,0,0,274,275,5,110,0,0,275,276,5,115,0,0,276,277,5,
        116,0,0,277,278,5,114,0,0,278,279,5,117,0,0,279,280,5,99,0,0,280,
        281,5,116,0,0,281,282,5,111,0,0,282,283,5,114,0,0,283,46,1,0,0,0,
        284,285,5,102,0,0,285,286,5,117,0,0,286,287,5,110,0,0,287,288,5,
        99,0,0,288,48,1,0,0,0,289,290,5,115,0,0,290,291,5,101,0,0,291,292,
        5,108,0,0,292,293,5,102,0,0,293,50,1,0,0,0,294,295,5,43,0,0,295,
        52,1,0,0,0,296,297,5,45,0,0,297,54,1,0,0,0,298,299,5,42,0,0,299,
        56,1,0,0,0,300,301,5,47,0,0,301,58,1,0,0,0,302,303,5,92,0,0,303,
        60,1,0,0,0,304,305,5,37,0,0,305,62,1,0,0,0,306,307,5,33,0,0,307,
        308,5,61,0,0,308,64,1,0,0,0,309,310,5,61,0,0,310,311,5,61,0,0,311,
        66,1,0,0,0,312,313,5,60,0,0,313,68,1,0,0,0,314,315,5,62,0,0,315,
        70,1,0,0,0,316,317,5,60,0,0,317,318,5,61,0,0,318,72,1,0,0,0,319,
        320,5,62,0,0,320,321,5,61,0,0,321,74,1,0,0,0,322,323,5,124,0,0,323,
        324,5,124,0,0,324,76,1,0,0,0,325,326,5,38,0,0,326,327,5,38,0,0,327,
        78,1,0,0,0,328,329,5,33,0,0,329,80,1,0,0,0,330,331,5,94,0,0,331,
        82,1,0,0,0,332,333,5,58,0,0,333,334,5,61,0,0,334,84,1,0,0,0,335,
        336,5,61,0,0,336,86,1,0,0,0,337,338,5,91,0,0,338,88,1,0,0,0,339,
        340,5,93,0,0,340,90,1,0,0,0,341,342,5,123,0,0,342,92,1,0,0,0,343,
        344,5,125,0,0,344,94,1,0,0,0,345,346,5,40,0,0,346,96,1,0,0,0,347,
        348,5,41,0,0,348,98,1,0,0,0,349,350,5,59,0,0,350,100,1,0,0,0,351,
        352,5,58,0,0,352,102,1,0,0,0,353,354,5,46,0,0,354,104,1,0,0,0,355,
        356,5,44,0,0,356,106,1,0,0,0,357,358,5,116,0,0,358,359,5,114,0,0,
        359,360,5,117,0,0,360,367,5,101,0,0,361,362,5,102,0,0,362,363,5,
        97,0,0,363,364,5,108,0,0,364,365,5,115,0,0,365,367,5,101,0,0,366,
        357,1,0,0,0,366,361,1,0,0,0,367,108,1,0,0,0,368,373,5,34,0,0,369,
        372,3,133,66,0,370,372,8,1,0,0,371,369,1,0,0,0,371,370,1,0,0,0,372,
        375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,376,1,0,0,0,375,
        373,1,0,0,0,376,377,5,34,0,0,377,378,6,54,1,0,378,110,1,0,0,0,379,
        381,3,119,59,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,0,382,
        383,1,0,0,0,383,384,1,0,0,0,384,385,3,103,51,0,385,435,1,0,0,0,386,
        388,3,119,59,0,387,386,1,0,0,0,388,389,1,0,0,0,389,387,1,0,0,0,389,
        390,1,0,0,0,390,391,1,0,0,0,391,393,3,103,51,0,392,394,3,119,59,
        0,393,392,1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,
        0,396,435,1,0,0,0,397,399,3,119,59,0,398,397,1,0,0,0,399,400,1,0,
        0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,408,1,0,0,0,402,404,3,103,
        51,0,403,405,3,119,59,0,404,403,1,0,0,0,405,406,1,0,0,0,406,404,
        1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,402,1,0,0,0,408,409,
        1,0,0,0,409,410,1,0,0,0,410,412,7,2,0,0,411,413,7,3,0,0,412,411,
        1,0,0,0,412,413,1,0,0,0,413,415,1,0,0,0,414,416,3,119,59,0,415,414,
        1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,435,
        1,0,0,0,419,421,3,119,59,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,
        1,0,0,0,422,423,1,0,0,0,423,424,1,0,0,0,424,425,3,103,51,0,425,427,
        7,2,0,0,426,428,7,3,0,0,427,426,1,0,0,0,427,428,1,0,0,0,428,430,
        1,0,0,0,429,431,3,119,59,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,
        1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,380,1,0,0,0,434,387,
        1,0,0,0,434,398,1,0,0,0,434,420,1,0,0,0,435,112,1,0,0,0,436,445,
        5,48,0,0,437,441,7,4,0,0,438,440,7,5,0,0,439,438,1,0,0,0,440,443,
        1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,445,1,0,0,0,443,441,
        1,0,0,0,444,436,1,0,0,0,444,437,1,0,0,0,445,114,1,0,0,0,446,450,
        7,6,0,0,447,449,7,7,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,
        1,0,0,0,450,451,1,0,0,0,451,116,1,0,0,0,452,450,1,0,0,0,453,454,
        5,64,0,0,454,458,7,6,0,0,455,457,7,7,0,0,456,455,1,0,0,0,457,460,
        1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,118,1,0,0,0,460,458,
        1,0,0,0,461,462,7,5,0,0,462,120,1,0,0,0,463,465,5,10,0,0,464,463,
        1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,468,
        1,0,0,0,468,469,6,60,0,0,469,122,1,0,0,0,470,474,5,34,0,0,471,473,
        3,131,65,0,472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,
        1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,0,477,479,7,8,0,0,478,477,
        1,0,0,0,479,480,1,0,0,0,480,481,6,61,2,0,481,124,1,0,0,0,482,483,
        5,92,0,0,483,486,8,9,0,0,484,486,8,10,0,0,485,482,1,0,0,0,485,484,
        1,0,0,0,486,126,1,0,0,0,487,489,7,11,0,0,488,487,1,0,0,0,489,490,
        1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,493,
        6,63,0,0,493,128,1,0,0,0,494,498,5,34,0,0,495,497,3,131,65,0,496,
        495,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,499,1,0,0,0,499,
        501,1,0,0,0,500,498,1,0,0,0,501,502,3,125,62,0,502,503,6,64,3,0,
        503,130,1,0,0,0,504,509,8,12,0,0,505,509,3,133,66,0,506,507,5,92,
        0,0,507,509,5,34,0,0,508,504,1,0,0,0,508,505,1,0,0,0,508,506,1,0,
        0,0,509,132,1,0,0,0,510,511,5,92,0,0,511,512,7,13,0,0,512,134,1,
        0,0,0,513,514,9,0,0,0,514,515,6,67,4,0,515,136,1,0,0,0,29,0,151,
        162,366,371,373,382,389,395,400,406,408,412,417,422,427,432,434,
        441,444,450,458,466,474,478,485,490,498,508,5,6,0,0,1,54,0,1,61,
        1,1,64,2,1,67,3
    ]

class CSlangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    LINE_CMT = 2
    BLOCK_CMT = 3
    IMPORT = 4
    ENTRYPOINT = 5
    CONST = 6
    VAR = 7
    INT = 8
    FLOAT = 9
    STRING = 10
    BOOL = 11
    BREAK = 12
    CLASS = 13
    CONTINUE = 14
    ELSE = 15
    INHERITANCE = 16
    IF = 17
    NEW = 18
    FOR = 19
    RETURN = 20
    VOID = 21
    NULL = 22
    CONSTRUCTOR = 23
    FUNC = 24
    SELF = 25
    ADD = 26
    SUB = 27
    MUL = 28
    DIV = 29
    INT_DIV = 30
    MOD = 31
    NOT_EQUAL = 32
    EQUAL = 33
    LT = 34
    GT = 35
    LE = 36
    GE = 37
    OR = 38
    AND = 39
    NOT = 40
    CONCATENATION = 41
    ASSINGMENT = 42
    ASSIGN = 43
    LSB = 44
    RSB = 45
    LP = 46
    RP = 47
    LB = 48
    RB = 49
    SM = 50
    CL = 51
    DOT = 52
    CM = 53
    BOOLLIT = 54
    STRINGLIT = 55
    FLOATLIT = 56
    INTLIT = 57
    ID = 58
    AT_ID = 59
    NEWLINE = 60
    UNCLOSE_STRING = 61
    WS = 62
    ILLEGAL_ESCAPE = 63
    ERROR_CHAR = 64

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'import'", "'@main'", "'const'", "'var'", "'int'", 
            "'float'", "'string'", "'bool'", "'break'", "'class'", "'continue'", 
            "'else'", "'<-'", "'if'", "'new'", "'for'", "'return'", "'void'", 
            "'null'", "'constructor'", "'func'", "'self'", "'+'", "'-'", 
            "'*'", "'/'", "'\\'", "'%'", "'!='", "'=='", "'<'", "'>'", "'<='", 
            "'>='", "'||'", "'&&'", "'!'", "'^'", "':='", "'='", "'['", 
            "']'", "'{'", "'}'", "'('", "')'", "';'", "':'", "'.'", "','" ]

    symbolicNames = [ "<INVALID>",
            "LINE_CMT", "BLOCK_CMT", "IMPORT", "ENTRYPOINT", "CONST", "VAR", 
            "INT", "FLOAT", "STRING", "BOOL", "BREAK", "CLASS", "CONTINUE", 
            "ELSE", "INHERITANCE", "IF", "NEW", "FOR", "RETURN", "VOID", 
            "NULL", "CONSTRUCTOR", "FUNC", "SELF", "ADD", "SUB", "MUL", 
            "DIV", "INT_DIV", "MOD", "NOT_EQUAL", "EQUAL", "LT", "GT", "LE", 
            "GE", "OR", "AND", "NOT", "CONCATENATION", "ASSINGMENT", "ASSIGN", 
            "LSB", "RSB", "LP", "RP", "LB", "RB", "SM", "CL", "DOT", "CM", 
            "BOOLLIT", "STRINGLIT", "FLOATLIT", "INTLIT", "ID", "AT_ID", 
            "NEWLINE", "UNCLOSE_STRING", "WS", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "LINE_CMT", "BLOCK_CMT", "IMPORT", "ENTRYPOINT", 
                  "CONST", "VAR", "INT", "FLOAT", "STRING", "BOOL", "BREAK", 
                  "CLASS", "CONTINUE", "ELSE", "INHERITANCE", "IF", "NEW", 
                  "FOR", "RETURN", "VOID", "NULL", "CONSTRUCTOR", "FUNC", 
                  "SELF", "ADD", "SUB", "MUL", "DIV", "INT_DIV", "MOD", 
                  "NOT_EQUAL", "EQUAL", "LT", "GT", "LE", "GE", "OR", "AND", 
                  "NOT", "CONCATENATION", "ASSINGMENT", "ASSIGN", "LSB", 
                  "RSB", "LP", "RP", "LB", "RB", "SM", "CL", "DOT", "CM", 
                  "BOOLLIT", "STRINGLIT", "FLOATLIT", "INTLIT", "ID", "AT_ID", 
                  "DIGIT", "NEWLINE", "UNCLOSE_STRING", "ESC_ILLEGAL", "WS", 
                  "ILLEGAL_ESCAPE", "STR_CHAR", "ESCAPE_SEQUENCE", "ERROR_CHAR" ]

    grammarFileName = "CSlang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[54] = self.STRINGLIT_action 
            actions[61] = self.UNCLOSE_STRING_action 
            actions[64] = self.ILLEGAL_ESCAPE_action 
            actions[67] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text.strip('"')
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:

            		error = str(self.text)
            		possible = ['\b', '\t', '\n', '\f', '\r', '\'', '\\']
            		if error[-1] in possible:
            			raise UncloseString(error[1:-1])
            		else:
            			raise UncloseString(error[1:])
            	
     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                    illegal_str = str(self.text)
                    raise IllegalEscape(illegal_str[1:])
                
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


